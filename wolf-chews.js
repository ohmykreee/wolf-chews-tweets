class WolfChewsElement extends HTMLElement{
    connectedCallback() {
        this._init()
    }

    _init () {
        // fetch value
        const config = {}
        const keys = ['url', 'method', 'index', 'container_id']
        for (let i = 0; i < this.attributes.length; i = i + 1) {
            if (keys.includes(this.attributes[i].name)) {
                config[this.attributes[i].name] = this.attributes[i].value
            }
        }

        // initalize container div
        var wct_container = document.createElement('div')
        if (config.container_id === undefined) {
            config['container_id'] = 'wct_container'
        }
        wct_container.setAttribute('id', config.container_id)
        this.appendChild(wct_container)

        // show loading status if Internet is slow
        let loading_node = document.createTextNode('🐺 loading... 🐺')
        wct_container.appendChild(loading_node)
        wct_container.setAttribute('class', 'loading')
        
        // verify value and decide config.type
        if (config.url === undefined) {
            throw this._throwException('incoming value', `Illegal value in attribute "url": ${config.type}`)
        }
        if (!(config.url.search('tweets') == -1)) {
            config['type'] = 'tweets'
        } else if(!(config.url.search('likes') == -1)) {
            config['type'] = 'likes'
        } else {
            throw this._throwException('incoming value', 'Illegal value in attribute "url": not generated by wolf-bites-tweets?')
        }
        if (!(config.method == 'widgets-light' || config.method == 'widgets-dark' || config.method == 'gallery')) {
            throw this._throwException('incoming value', `Illegal value in attribute "method": ${config.method}`)
        }

        // get data from wolf-bites-tweets
        fetch(config.url)
        .then(response => {
            response.json().then(tweet_data => {
            // generate index number
            let tweet_index
            let data_lenght
            switch (config.type) {
                case 'tweets':
                    data_lenght = tweet_data.data.length - 1
                break

                case 'likes':
                    data_lenght = tweet_data.length - 1
            }
            if (!config.index){
                tweet_index = this._getRandomInt(0, data_lenght)
            } else {
                tweet_index = config.index
            }

            // start to generate
            switch (config.type) {
                case 'tweets':
                    this.renderTweets(tweet_data, config.method, tweet_index,)
                break
        
                case 'likes':
                    this.renderLikes(tweet_data, config.method, tweet_index,)
            }
        })
        })
    }
    
    _throwException (stage, message) {
        this._clearContainerStates()
        let error_node = document.createTextNode('Aww... An error occured 🤕.')
        wct_container.appendChild((error_node))
        wct_container.setAttribute('class', 'error')
        return `${stage} : ${message}`
    }

    /**
    * Returns a random integer between min and max
    * Using Math.round() will give you a non-uniform distribution!
    * Both min and max can be randomed
    */
    _getRandomInt (min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min
    }

    _clearContainerStates() {
        wct_container.textContent = ''
        wct_container.removeAttribute('class')
    }

    _renderEmbedTweet(id, theme,) {
        try{
            twttr.widgets.createTweet(
                id,
                wct_container,
                {
                  theme: theme,
                }
              ).then(this._clearContainerStates());
        } catch (e) {
            throw this._throwException('render widgets', e)
        }
    }

    _renderGallery(text, screen_name, url, media) {
        this._clearContainerStates()
        wct_container.setAttribute('class', 'tw-gallery')

        // render information div and put in front of img div
        let info_node = document.createElement('div')
        info_node.setAttribute('class', 'tw-info')
        let text_node = document.createTextNode('@' + screen_name + ': ' + text)
        let link_node = document.createElement('a')
        link_node.setAttribute('href', url)
        link_node.setAttribute('target', '_blank')
        let span_node = document.createElement('span')
        span_node.setAttribute('class', 'link-spanner')
        link_node.appendChild(span_node)
        info_node.appendChild(text_node)
        info_node.appendChild(link_node)
        wct_container.appendChild(info_node)
        let hr_node = document.createElement('hr')

        // render img div
        if (media.length > 1) {
            // render hr
            hr_node.setAttribute('style', 'margin: 16px;')
            wct_container.appendChild(hr_node)
            // render swiper div
            let node_swiper_wrapper = document.createElement('div')
            node_swiper_wrapper.setAttribute('class', 'swiper-wrapper')
            let node_swiper_pagination = document.createElement('div')
            node_swiper_pagination.setAttribute('class', 'swiper-pagination')
            let node_swiper_button_prev = document.createElement('div')
            node_swiper_button_prev.setAttribute('class', 'swiper-button-prev')
            let node_swiper_button_next = document.createElement('div')
            node_swiper_button_next.setAttribute('class', 'swiper-button-next')
            for (let i = 0; i < media.length; i = i + 1) {
                let node_slide = document.createElement('div')
                node_slide.setAttribute('class', 'swiper-slide')
                let node_content = document.createElement('img')
                node_content.setAttribute('src', media[i])
                node_slide.appendChild(node_content)
                node_slide.setAttribute('style', 'text-align: center;')
                node_swiper_wrapper.appendChild(node_slide)
            }
            wct_container.appendChild(node_swiper_wrapper)
            wct_container.appendChild(node_swiper_pagination)
            wct_container.appendChild(node_swiper_button_prev)
            wct_container.appendChild(node_swiper_button_next)
            wct_container.setAttribute('class', 'swiper')
            try{
                const swiper = new Swiper('.swiper', {
                    speed: 400,
                    autoHeight: true,
                    navigation: {
                        nextEl: '.swiper-button-next',
                        prevEl: '.swiper-button-prev',
                    },
                    hideOnClick: true,
                    pagination: {
                        el: '.swiper-pagination',
                        type: 'bullets',
                    },
                })
            } catch(e) {
                throw this._throwException('render gallery', e)
            }
        } else if (media.length == 1) {
            // render hr
            hr_node.setAttribute('style', 'margin: 16px;')
            wct_container.appendChild(hr_node)
            // render img
            let node_content = document.createElement('img')
            node_content.setAttribute('src', media[0])
            wct_container.appendChild(node_content)
        }
    }

    renderTweets(data, method, index) {
        // get basic data
        // console.log(index)
        let id = data.data[index].id
        let text = data.data[index].text
        let screen_name = data.user.username
        let url = `https://twitter.com/${screen_name}/status/${id}`
        const media = []
        let media_raw
        if (data.data[index].hasOwnProperty('attachments')) {
            media_raw = data.data[index].attachments.media
            for (let i = 0; i < media_raw.length; i = i + 1) {
                if (media_raw[i].hasOwnProperty('url')) {
                    media.push(media_raw[i].url)
                }
            }
        }
    
        switch (method) {
            case 'widgets-light':
                this._renderEmbedTweet(id, 'light')
                break
        
            case 'widgets-dark':
                this._renderEmbedTweet(id, 'dark')
                break

            case 'gallery':
                this._renderGallery(text, screen_name, url, media)
        }
    }

    renderLikes (data, method, index) {
        // console.log(index)
        // get basic data
        // console.log(index)
        let id = data[index].id_str
        let text = data[index].text
        let screen_name = data[index].user.screen_name
        let url = `https://twitter.com/${screen_name}/status/${id}`
        const media = []
        let media_raw
        if (data[index].hasOwnProperty('extended_entities')) {
            media_raw = data[index].extended_entities.media
            for (let i = 0; i < media_raw.length; i = i + 1) {
                if (media_raw[i].hasOwnProperty('media_url_https')) {
                    media.push(media_raw[i].media_url_https)
                }
            }
        }
    
            switch (method) {
            case 'widgets-light':
                this._renderEmbedTweet(id, 'light')
                break
        
            case 'widgets-dark':
                this._renderEmbedTweet(id, 'dark')
                break
            
            case 'gallery':
                this._renderGallery(text, screen_name, url, media)
        }
    }
}

window.customElements.define('wolf-chews', WolfChewsElement)